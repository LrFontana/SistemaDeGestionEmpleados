// <auto-generated />
using System;
using LibreriaServer.Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibreriaServer.Datos.Migraciones
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240229055031_PrimeraMigracion")]
    partial class PrimeraMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibreriaBase.Entidades.AplicacionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompelto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AplicacionUsuario");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("Ciudad");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoGeneralId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoGeneralId");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.DepartamentoGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepartamentoGeneral");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdEmpleado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreTrabajo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroArchivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PuebloId")
                        .HasColumnType("int");

                    b.Property<int>("RamaId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PuebloId");

                    b.HasIndex("RamaId");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.HorasExtras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdEmpleado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroARchivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoHorasExtrasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoHorasExtrasId");

                    b.ToTable("HorasExtras");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.InfoTokenActualizado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InfoTokenActualizado");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiagnosticoMedico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdEmpleado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroARchivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecomendacionesMEdicas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Pueblo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.ToTable("Pueblo");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Rama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Rama");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.RolUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RolUsuario");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Sancion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Castigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CastigoFecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dia")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdEmpleado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroARchivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipoDeSancionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoDeSancionId");

                    b.ToTable("Sanciones");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.SistemaDeRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SistemaDeRol");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.TipoDeSancion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoDeSanciones");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.TipoDeVacaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoDeVacaciones");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.TipoHorasExtras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoHorasExtras");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Vacaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdEmpleado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroARchivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDeDias")
                        .HasColumnType("int");

                    b.Property<string>("Otro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDeVacacionesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoDeVacacionesId");

                    b.ToTable("Vacaiones");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Ciudad", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.Pais", "Pais")
                        .WithMany("Ciudad")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Departamento", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.DepartamentoGeneral", "DepartamentoGeneral")
                        .WithMany("Departamento")
                        .HasForeignKey("DepartamentoGeneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartamentoGeneral");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Empleado", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.Pueblo", "Pueblo")
                        .WithMany("Empleados")
                        .HasForeignKey("PuebloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreriaBase.Entidades.Rama", "Rama")
                        .WithMany("Empleados")
                        .HasForeignKey("RamaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pueblo");

                    b.Navigation("Rama");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.HorasExtras", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.TipoHorasExtras", "TipoHorasExtras")
                        .WithMany()
                        .HasForeignKey("TipoHorasExtrasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoHorasExtras");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Pueblo", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.Ciudad", "Ciudad")
                        .WithMany("Pueblos")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Rama", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.Departamento", "Departamento")
                        .WithMany("Ramas")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Sancion", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.TipoDeSancion", "TipoDeSancion")
                        .WithMany("Sanciones")
                        .HasForeignKey("TipoDeSancionId");

                    b.Navigation("TipoDeSancion");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Vacaciones", b =>
                {
                    b.HasOne("LibreriaBase.Entidades.TipoDeVacaciones", "TipoDeVacaciones")
                        .WithMany("Vacaciones")
                        .HasForeignKey("TipoDeVacacionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDeVacaciones");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Ciudad", b =>
                {
                    b.Navigation("Pueblos");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Departamento", b =>
                {
                    b.Navigation("Ramas");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.DepartamentoGeneral", b =>
                {
                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Pais", b =>
                {
                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Pueblo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.Rama", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.TipoDeSancion", b =>
                {
                    b.Navigation("Sanciones");
                });

            modelBuilder.Entity("LibreriaBase.Entidades.TipoDeVacaciones", b =>
                {
                    b.Navigation("Vacaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
